const { create } = require('domain');
const fs = require('fs');
var path = require('path');
var crypto = require('crypto');
const { type } = require('os');

const types = {
  "Action": "action",
  "Adept Powers": "adept_power",
  "Devices": "device",
  "Foci": "equipment",
  "Metamagic": "quality",
  "Programs": "program",
  "Qualities": "quality",
  "Spells": "spell",
};

var walk = function (dir, done) {
  var results = [];
  fs.readdir(dir, function (err, list) {
    if (err) return done(err);
    var pending = list.length;
    if (!pending) return done(null, results);
    list.forEach(function (file) {
      file = path.resolve(dir, file);
      fs.stat(file, function (err, stat) {
        if (stat && stat.isDirectory()) {
          walk(file, function (err, res) {
            results = results.concat(res);
            if (!--pending) done(null, results);
          });
        } else {
          results.push(file);
          if (!--pending) done(null, results);
        }
      });
    });
  });
};

function generateRandomID() {
  return new Promise((res) => {
      crypto.randomBytes(12, (err, buf) => {
          if(err) throw err;
          const enc = buf.toString('base64');
          if(enc.length !== 16) throw 'invalid';
          res(enc);
      });
  });
}

walk('./src/Macros', function (err, results) {
  if (err) throw err;
  var scripts = [];
  var names = [];
  results.forEach(file => {
    if (file.endsWith('.js')) {
      console.log(file);
      scripts.push(convertFile(file));
      names.push(file.split('/').pop().split('.')[0]);
    }
  });
  createFile(scripts, names);
});

walk('./src/Effect-Macros', function (err, results) {
  if (err) throw err;
  var scripts = [];
  var wireless = false;
  var relative = "";
  var type = "";
  var name = "";
  var filecontents = "";
  var script = {};
  results.forEach(file => {
    if (file.endsWith('.js')) {
      if (file.endsWith('cleanup.js')) return;
      if (file.endsWith('Control-Rig.js')) return;
      relative = path.relative('./src/Effect-Macros', file);
      console.log(relative.split('/')[1]);
      type = types[relative.split('/')[0]];
      name = relative.split('/')[1];
      filecontents = convertFile(file);
      if (type == "device" || type == "equipment") {
        wireless = true;
      }
      script = {
        "script": filecontents,
        "name": name,
        "type": type,
        "wireless": wireless
      }
      scripts.push(script);
    }
  });
  createItemsFile(scripts);
});

function convertFile(file) {
  fs.readFile(file, 'utf8', function (err, data) {
    if (err) {
      return console.log(err);
    }
    return data;
  });
}

function writeFile(file, name) {
  fs.writeFile(`./packs/${name}.db`, file, err => {
    if (err) {
      return console.log(err);
    }
    console.log("The file was saved!");
  });
}

function createFile(scripts, names) {
  var file = `// This file was generated by a script. Do not edit.\n`;
  var uuid = "";
  generateRandomID().then(id => { uuid = id }).catch(err => { console.log(err) });
  uuid = uuid.replace(/=/g, '');
  for (i = 0; i < scripts.length; i++) {
    var name = names[i].charAt(0).toUpperCase() + names[i].slice(1);
    var filecontents = {
      "name": name,
      "permission": {
          "default": 2
      },
      "type": "script",
      "_id": uuid,
      "scope": "global",
      "img": "assets/icons/"+names[i]+".svg",
      "folder": "null",
      "_stats": {
          "system": "shadowrun5e"
      },
      "command": scripts[i]
    };
    file += JSON.stringify(filecontents) + "\n";
  }
  writeFile(file, "scripts");
}

function createItemsFile(scripts) {
  var file = `// This file was generated by a script. Do not edit.\n`;
  var uuid = "";
  generateRandomID().then(id => { uuid = id }).catch(err => { console.log(err) });
  uuid = uuid.replace(/=/g, '');
  for (i = 0; i < scripts.length; i++) {
    var type = scripts[i].type;
    var name = scripts[i].name;
    var img = name.toLowerCase().replace(/ /g, '_');
    var effect = scripts[i].script;
    var filecontents = {
      "name": name,
      "type": type,
      "ownership": {
        "default": 2
      },
      "effects": [
        {
          "key": uuid,
          "value": {
            "_id": uuid,
            "name": name,
            "flags": {
              "effectmacro": {
                "onCreate": { 
                  "script": effect
                },
                "onToggle": {
                  "script": effect
                }
              }
            }
          }
        }
      ],
      "flags": {},
      "_stats": {
        "systemId": "shadowrun5e",
        "systemVersion": "0.14.1",
        "coreVersion": "11.313",
        "createdTime": 1696022797597,
        "modifiedTime": 1698360878446,
        "lastModifiedBy": "ltL8cFp0swj2NfHd"
      },
      "labels": {},
      "items": []
    };
    file += JSON.stringify(filecontents) + "\n";
  }
  writeFile(file, "items");
}